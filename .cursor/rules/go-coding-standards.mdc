---
globs: *.go
---

# Go Coding Standards for Jaqen

## Code Style and Conventions

### Package Organization
- Use clear, descriptive package names that reflect functionality
- Keep packages focused on single responsibilities
- **cmd/**: CLI command implementations using Cobra
- **pkgs/**: Core business logic and domain-specific functionality
- **internal/**: Private utilities and helpers not meant for external use

### Error Handling
- Always handle errors explicitly - never ignore them
- Use `log.Fatalln(err)` for fatal errors that should terminate the program
- Return errors from functions that can fail, don't panic unless absolutely necessary
- Use `fmt.Errorf` with `%w` verb for error wrapping when appropriate

### Type Definitions
- Define custom types for domain concepts (e.g., `Ethnic`, `PlayerID`, `FilePath`)
- Use type aliases for better code readability and type safety
- Validate types with helper functions (e.g., `IsValidEthnic()`)

### Constants and Configuration
- Group related constants together
- Use descriptive constant names
- Define defaults in [internal/constants.go](mdc:internal/constants.go)
- Use maps for lookup tables (e.g., `NationEthnicMapping`)

### Function Design
- Keep functions focused and single-purpose
- Use descriptive function names that indicate what they do
- Prefer returning values over side effects
- Use pointers for optional configuration fields

### File Organization
- One main type per file when possible
- Group related functionality together
- Keep files reasonably sized and focused

### Import Management
- Use import aliases for clarity (e.g., `internal "jaqen/internal"`)
- Group imports: standard library, third-party, local packages
- Use `goimports` for automatic import formatting

### Cobra CLI Patterns
- Define flag variables at package level
- Use descriptive flag names and help text
- Implement proper flag validation
- Use subcommands for different operations (e.g., `format` command)

### Testing
- Write tests for utility functions and core logic
- Use table-driven tests for multiple test cases
- Test error conditions and edge cases
- Place tests in `*_test.go` files

### Performance Considerations
- Use sets for efficient lookups (golang-set library)
- Consider buffered I/O for large file operations
- Avoid unnecessary allocations in loops
- Use appropriate data structures for the use case