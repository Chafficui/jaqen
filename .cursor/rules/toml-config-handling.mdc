---
globs: *.toml,*.go
description: TOML configuration file handling and parsing
---

# TOML Configuration Handling

## Configuration Structure

The main configuration is defined in [internal/types.go](mdc:internal/types.go) as `JaqenConfig` struct:

```go
type JaqenConfig struct {
    Preserve        *bool              `field:"preserve" toml:"preserve"`
    XMLPath         *string            `field:"xml_path" toml:"xml_path"`
    RTFPath         *string            `field:"rtf_path" toml:"rtf_path"`
    IMGPath         *string            `field:"img_path" toml:"img_path"`
    FMVersion       *string            `field:"fm_version" toml:"fm_version"`
    AllowDuplicate  *bool              `field:"allow_duplicate" toml:"allow_duplicate"`
    MappingOverride *map[string]string `field:"mapping_override" toml:"mapping_override"`
}
```

## Configuration Priority

1. **Command Line Flags** (highest priority)
2. **TOML Config File** (medium priority) 
3. **Default Values** (lowest priority)

See [internal/constants.go](mdc:internal/constants.go) for default values.

## TOML File Format

### Basic Configuration
```toml
preserve = true
allow_duplicate = true
xml_path = '/path/to/xml_file'
rtf_path = '/path/to/rtf_file'
img_path = '/path/to/game/img/directory'
fm_version = '2024'
```

### Nation-to-Ethnic Mapping Override
```toml
[mapping_override]
AFG = 'MESA'  # Afghanistan -> Middle East South Asian
ENG = 'Caucasian'  # England -> Caucasian
```

## Configuration Processing

### Reading Configuration
- Use `internal.ReadConfig(filePath)` to read TOML files
- Always check if config file exists before reading
- Handle parsing errors gracefully

### Writing Configuration
- Use `internal.WriteConfig(config, filePath)` to write TOML files
- The `format` command sorts mapping overrides alphabetically
- Preserve all existing configuration values

### Flag Override Logic
In [cmd/root.go](mdc:cmd/root.go), flags override config file values:
```go
if !cmd.Flags().Changed(flagkeysPreserve) && configFromFile.Preserve != nil {
    preserve = *configFromFile.Preserve
}
```

## Valid Ethnic Group Codes

When working with `mapping_override`, use these valid ethnic codes:
- `African`, `Asian`, `Caucasian`, `Central European`
- `EECA` (Eastern European Central Asian)
- `Italmed` (Italian Mediterranean)
- `MENA` (Middle East North African)
- `MESA` (Middle East South Asian)
- `SAMed` (South American Mediterranean)
- `Scandinavian`, `Seasian` (South East Asian)
- `South American`, `SpanMed` (Spanish Mediterranean)
- `YugoGreek` (Yugoslav Greek)

## Configuration Validation

- Validate ethnic codes using `mapper.IsValidEthnic(ethnic)`
- Check file paths exist before processing
- Ensure mapping override values are valid ethnic groups
- Handle missing or malformed configuration gracefully